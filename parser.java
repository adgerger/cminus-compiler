
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import absyn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\015\003\000\002\015" +
    "\003\000\002\043\004\000\002\043\003\000\002\043\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\002\005\000\002\002\010\000\002\002\004\000\002" +
    "\002\004\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\031\010\000\002\032\003\000\002\032\003\000" +
    "\002\041\005\000\002\041\003\000\002\037\004\000\002" +
    "\037\006\000\002\010\006\000\002\042\004\000\002\042" +
    "\002\000\002\030\004\000\002\030\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\011\004\000\002\011\003\000\002\006\005\000\002\006" +
    "\003\000\002\012\007\000\002\012\011\000\002\013\007" +
    "\000\002\014\005\000\002\014\004\000\002\036\003\000" +
    "\002\036\006\000\002\016\005\000\002\016\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\017\005" +
    "\000\002\017\003\000\002\025\004\000\002\025\003\000" +
    "\002\020\005\000\002\020\003\000\002\007\005\000\002" +
    "\007\003\000\002\033\003\000\002\033\003\000\002\021" +
    "\005\000\002\021\003\000\002\035\003\000\002\035\003" +
    "\000\002\022\004\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\006\000\002\026\003\000\002\026" +
    "\002\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\014\003\015\004\005\007\004\011\010\046" +
    "\007\001\002\000\006\003\211\043\ufff4\001\002\000\006" +
    "\003\210\043\ufff2\001\002\000\012\002\ufffd\004\ufffd\007" +
    "\ufffd\011\ufffd\001\002\000\004\002\uffff\001\002\000\004" +
    "\043\ufff3\001\002\000\004\002\207\001\002\000\012\002" +
    "\ufffa\004\ufffa\007\ufffa\011\ufffa\001\002\000\012\002\000" +
    "\004\005\007\004\011\010\001\002\000\004\043\021\001" +
    "\002\000\010\004\005\007\004\011\010\001\002\000\012" +
    "\002\ufffb\004\ufffb\007\ufffb\011\ufffb\001\002\000\012\002" +
    "\ufff9\004\ufff9\007\ufff9\011\ufff9\001\002\000\012\002\ufffc" +
    "\004\ufffc\007\ufffc\011\ufffc\001\002\000\012\003\022\033" +
    "\023\034\025\036\024\001\002\000\010\004\027\007\034" +
    "\011\010\001\002\000\042\002\ufff8\003\ufff8\004\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\027\ufff8\033\ufff8" +
    "\034\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\045\ufff8\001" +
    "\002\000\004\044\200\001\002\000\010\004\027\007\034" +
    "\011\033\001\002\000\010\003\175\035\uffed\042\174\001" +
    "\002\000\004\043\ufff2\001\002\000\010\003\uffea\035\uffea" +
    "\042\uffea\001\002\000\004\043\171\001\002\000\004\035" +
    "\035\001\002\000\006\035\uffec\043\ufff3\001\002\000\004" +
    "\043\ufff4\001\002\000\006\033\040\040\037\001\002\000" +
    "\012\002\ufff1\004\ufff1\007\ufff1\011\ufff1\001\002\000\040" +
    "\003\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\027\uffe5\033\uffe5\034\uffe5\040\uffe5\041\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\001\002\000\012\002\uffee\004\uffee\007" +
    "\uffee\011\uffee\001\002\000\040\003\uffe3\004\005\006\uffe3" +
    "\007\004\010\uffe3\011\010\012\uffe3\027\uffe3\033\uffe3\034" +
    "\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3\045\uffe3\001\002" +
    "\000\032\003\074\006\056\010\054\012\050\027\063\033" +
    "\051\034\057\040\037\041\053\043\061\044\062\045\047" +
    "\001\002\000\040\003\uffe6\004\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\027\uffe6\033\uffe6\034\uffe6\040\uffe6" +
    "\041\uffe6\043\uffe6\044\uffe6\045\uffe6\001\002\000\004\043" +
    "\045\001\002\000\006\033\023\036\024\001\002\000\014" +
    "\030\167\033\uffd8\035\uffd8\037\uffd8\042\uffd8\001\002\000" +
    "\042\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\033" +
    "\uffb4\035\uffb4\037\uffb4\042\uffb4\001\002\000\004\034\163" +
    "\001\002\000\034\003\uffda\005\uffda\006\uffda\010\uffda\012" +
    "\uffda\027\uffda\033\uffda\034\uffda\040\uffda\041\uffda\043\uffda" +
    "\044\uffda\045\uffda\001\002\000\016\030\uffcf\031\161\033" +
    "\uffcf\035\uffcf\037\uffcf\042\uffcf\001\002\000\044\002\uffe7" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\027\uffe7\033\uffe7\034\uffe7\040\uffe7\041\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\001\002\000\020\003\157\027" +
    "\063\033\155\034\057\043\061\044\062\045\047\001\002" +
    "\000\034\003\uffe1\005\uffe1\006\uffe1\010\uffe1\012\uffe1\027" +
    "\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\001\002\000\004\034\147\001\002\000\014\027" +
    "\063\034\057\043\061\044\062\045\047\001\002\000\032" +
    "\003\uffe4\006\uffe4\010\uffe4\012\uffe4\027\uffe4\033\uffe4\034" +
    "\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\001\002" +
    "\000\050\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\134\035\uffd2\036\133\037\uffd2\042" +
    "\uffd2\001\002\000\042\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\030" +
    "\uffb5\031\uffb5\033\uffb5\035\uffb5\037\uffb5\042\uffb5\001\002" +
    "\000\014\027\063\034\057\043\061\044\062\045\047\001" +
    "\002\000\034\003\uffde\005\uffde\006\uffde\010\uffde\012\uffde" +
    "\027\uffde\033\uffde\034\uffde\040\uffde\041\uffde\043\uffde\044" +
    "\uffde\045\uffde\001\002\000\004\033\130\001\002\000\042" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9\031\uffb9\033\uffb9" +
    "\035\uffb9\037\uffb9\042\uffb9\001\002\000\036\015\120\016" +
    "\114\021\125\022\116\023\121\024\115\025\122\026\117" +
    "\030\uffc3\031\uffc3\033\uffc3\035\uffc3\037\uffc3\042\uffc3\001" +
    "\002\000\042\015\uffc1\016\uffc1\017\107\020\106\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1\031" +
    "\uffc1\033\uffc1\035\uffc1\037\uffc1\042\uffc1\001\002\000\016" +
    "\030\uffc5\031\uffc5\033\uffc5\035\uffc5\037\uffc5\042\uffc5\001" +
    "\002\000\034\003\uffe2\005\uffe2\006\uffe2\010\uffe2\012\uffe2" +
    "\027\uffe2\033\uffe2\034\uffe2\040\uffe2\041\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\001\002\000\034\003\uffe0\005\uffe0\006\uffe0" +
    "\010\uffe0\012\uffe0\027\uffe0\033\uffe0\034\uffe0\040\uffe0\041" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\001\002\000\004\033\104" +
    "\001\002\000\042\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd" +
    "\031\uffbd\033\uffbd\035\uffbd\037\uffbd\042\uffbd\001\002\000" +
    "\034\003\uffdf\005\uffdf\006\uffdf\010\uffdf\012\uffdf\027\uffdf" +
    "\033\uffdf\034\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\001\002\000\042\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030" +
    "\uffb6\031\uffb6\033\uffb6\035\uffb6\037\uffb6\042\uffb6\001\002" +
    "\000\044\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7" +
    "\032\102\033\uffb7\035\uffb7\037\uffb7\042\uffb7\001\002\000" +
    "\016\030\uffc7\031\uffc7\033\uffc7\035\uffc7\037\uffc7\042\uffc7" +
    "\001\002\000\014\027\063\034\057\043\061\044\062\045" +
    "\047\001\002\000\012\033\uffd9\035\uffd9\037\uffd9\042\uffd9" +
    "\001\002\000\034\003\uffdc\005\uffdc\006\uffdc\010\uffdc\012" +
    "\uffdc\027\uffdc\033\uffdc\034\uffdc\040\uffdc\041\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\001\002\000\014\027\111\034\057\043" +
    "\061\044\062\045\047\001\002\000\014\027\uffbb\034\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\001\002\000\014\027\uffbc\034" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\001\002\000\042\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\033\uffbe\035\uffbe" +
    "\037\uffbe\042\uffbe\001\002\000\014\027\111\034\057\043" +
    "\061\044\062\045\047\001\002\000\042\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\030\uffb7\031\uffb7\033\uffb7\035\uffb7\037\uffb7" +
    "\042\uffb7\001\002\000\042\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\030\uffba\031\uffba\033\uffba\035\uffba\037\uffba\042\uffba\001" +
    "\002\000\014\027\uffbf\034\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\001\002\000\014\027\uffcb\034\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\001\002\000\014\027\uffce\034\uffce\043\uffce\044\uffce" +
    "\045\uffce\001\002\000\014\027\uffc9\034\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\001\002\000\014\027\uffc0\034\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\001\002\000\014\027\uffcc\034\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\001\002\000\014\027\uffca\034\uffca" +
    "\043\uffca\044\uffca\045\uffca\001\002\000\014\027\111\034" +
    "\057\043\061\044\062\045\047\001\002\000\014\027\111" +
    "\034\057\043\061\044\062\045\047\001\002\000\014\027" +
    "\uffcd\034\uffcd\043\uffcd\044\uffcd\045\uffcd\001\002\000\042" +
    "\015\uffc2\016\uffc2\017\107\020\106\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\033\uffc2" +
    "\035\uffc2\037\uffc2\042\uffc2\001\002\000\022\015\120\016" +
    "\114\030\uffc4\031\uffc4\033\uffc4\035\uffc4\037\uffc4\042\uffc4" +
    "\001\002\000\034\003\uffdb\005\uffdb\006\uffdb\010\uffdb\012" +
    "\uffdb\027\uffdb\033\uffdb\034\uffdb\040\uffdb\041\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\001\002\000\042\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\030\uffbd\031\uffbd\033\uffbd\035\uffbd\037\uffbd\042" +
    "\uffbd\001\002\000\016\030\uffc6\031\uffc6\033\uffc6\035\uffc6" +
    "\037\uffc6\042\uffc6\001\002\000\014\027\063\034\057\043" +
    "\061\044\062\045\047\001\002\000\016\027\063\034\057" +
    "\035\uffb1\043\061\044\062\045\047\001\002\000\004\035" +
    "\142\001\002\000\006\035\uffaf\042\uffaf\001\002\000\006" +
    "\035\uffb2\042\140\001\002\000\014\027\063\034\057\043" +
    "\061\044\062\045\047\001\002\000\006\035\uffb0\042\uffb0" +
    "\001\002\000\042\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\035\uffb3\037\uffb3\042\uffb3\001\002\000" +
    "\004\037\144\001\002\000\044\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1" +
    "\042\uffd1\001\002\000\004\035\146\001\002\000\042\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\033\uffb8\035" +
    "\uffb8\037\uffb8\042\uffb8\001\002\000\014\027\063\034\057" +
    "\043\061\044\062\045\047\001\002\000\004\035\151\001" +
    "\002\000\030\003\074\006\056\010\054\012\050\027\063" +
    "\033\051\034\057\040\037\043\061\044\062\045\047\001" +
    "\002\000\034\003\uffd7\005\153\006\uffd7\010\uffd7\012\uffd7" +
    "\027\uffd7\033\uffd7\034\uffd7\040\uffd7\041\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\001\002\000\030\003\074\006\056\010\054" +
    "\012\050\027\063\033\051\034\057\040\037\043\061\044" +
    "\062\045\047\001\002\000\034\003\uffd6\005\uffd6\006\uffd6" +
    "\010\uffd6\012\uffd6\027\uffd6\033\uffd6\034\uffd6\040\uffd6\041" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\001\002\000\034\003\uffd3" +
    "\005\uffd3\006\uffd3\010\uffd3\012\uffd3\027\uffd3\033\uffd3\034" +
    "\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\001\002" +
    "\000\004\033\160\001\002\000\034\003\uffdd\005\uffdd\006" +
    "\uffdd\010\uffdd\012\uffdd\027\uffdd\033\uffdd\034\uffdd\040\uffdd" +
    "\041\uffdd\043\uffdd\044\uffdd\045\uffdd\001\002\000\034\003" +
    "\uffd4\005\uffd4\006\uffd4\010\uffd4\012\uffd4\027\uffd4\033\uffd4" +
    "\034\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4\001" +
    "\002\000\014\027\063\034\057\043\061\044\062\045\047" +
    "\001\002\000\016\030\uffc8\031\uffc8\033\uffc8\035\uffc8\037" +
    "\uffc8\042\uffc8\001\002\000\014\027\063\034\057\043\061" +
    "\044\062\045\047\001\002\000\004\035\165\001\002\000" +
    "\030\003\074\006\056\010\054\012\050\027\063\033\051" +
    "\034\057\040\037\043\061\044\062\045\047\001\002\000" +
    "\034\003\uffd5\005\uffd5\006\uffd5\010\uffd5\012\uffd5\027\uffd5" +
    "\033\uffd5\034\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\001\002\000\014\027\063\034\057\043\061\044\062" +
    "\045\047\001\002\000\014\030\167\033\uffd0\035\uffd0\037" +
    "\uffd0\042\uffd0\001\002\000\012\003\uffe9\035\uffe9\036\172" +
    "\042\uffe9\001\002\000\004\037\173\001\002\000\010\003" +
    "\uffe8\035\uffe8\042\uffe8\001\002\000\010\004\027\007\034" +
    "\011\010\001\002\000\004\040\037\001\002\000\012\002" +
    "\uffef\004\uffef\007\uffef\011\uffef\001\002\000\010\003\uffeb" +
    "\035\uffeb\042\uffeb\001\002\000\004\037\201\001\002\000" +
    "\004\033\202\001\002\000\042\002\ufff7\003\ufff7\004\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\027\ufff7\033" +
    "\ufff7\034\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\001\002\000\006\035\204\042\174\001\002\000\004\040" +
    "\037\001\002\000\012\002\ufff0\004\ufff0\007\ufff0\011\ufff0" +
    "\001\002\000\012\002\ufffe\004\ufffe\007\ufffe\011\ufffe\001" +
    "\002\000\004\002\001\001\002\000\042\002\ufff5\003\ufff5" +
    "\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\027" +
    "\ufff5\033\ufff5\034\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\001\002\000\042\002\ufff6\003\ufff6\004\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\027\ufff6\033\ufff6" +
    "\034\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045\ufff6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\020\002\015\003\005\004\011\015\010\031" +
    "\016\040\013\043\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\015" +
    "\003\205\004\011\031\016\040\013\001\001\000\002\001" +
    "\001\000\014\002\015\003\017\004\011\031\016\040\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\037\027\040\030\041\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\031\037\027\040\030\041\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\035\001\001\000\002\001\001\000\004\042\040\001" +
    "\001\000\002\001\001\000\010\002\042\030\041\040\043" +
    "\001\001\000\044\005\057\006\064\007\066\010\054\011" +
    "\071\012\072\013\075\014\063\016\045\017\051\020\070" +
    "\021\067\022\074\023\065\024\076\025\100\036\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\155\007\066\016\045\017\051\020\070\021\067\022" +
    "\074\023\065\024\076\025\100\036\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\144\007\066\016" +
    "\045\017\051\020\070\021\067\022\074\023\065\024\076" +
    "\025\100\036\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\066\020\070\021\067" +
    "\022\130\023\065\024\076\025\131\036\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\123\034\122\001\001\000\004\035\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\102" +
    "\007\066\016\045\017\051\020\070\021\067\022\074\023" +
    "\065\024\076\025\100\036\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\107\023\065\024\076\036" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\112\023\065\024\076\036\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\126\021\067\022\074\023\065\024\076\036\111\001" +
    "\001\000\014\021\125\022\074\023\065\024\076\036\111" +
    "\001\001\000\002\001\001\000\004\035\104\001\001\000" +
    "\004\033\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\142\007\066\016\045\017" +
    "\051\020\070\021\067\022\074\023\065\024\076\025\100" +
    "\036\077\001\001\000\034\006\135\007\066\016\045\017" +
    "\051\020\070\021\067\022\074\023\065\024\076\025\100" +
    "\026\134\027\136\036\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\140\007\066" +
    "\016\045\017\051\020\070\021\067\022\074\023\065\024" +
    "\076\025\100\036\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\147\007\066\016\045" +
    "\017\051\020\070\021\067\022\074\023\065\024\076\025" +
    "\100\036\077\001\001\000\002\001\001\000\044\005\151" +
    "\006\064\007\066\010\054\011\071\012\072\013\075\014" +
    "\063\016\045\017\051\020\070\021\067\022\074\023\065" +
    "\024\076\025\100\036\077\001\001\000\002\001\001\000" +
    "\044\005\153\006\064\007\066\010\054\011\071\012\072" +
    "\013\075\014\063\016\045\017\051\020\070\021\067\022" +
    "\074\023\065\024\076\025\100\036\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\066\020\070\021\067" +
    "\022\074\023\065\024\076\025\161\036\111\001\001\000" +
    "\002\001\001\000\030\006\163\007\066\016\045\017\051" +
    "\020\070\021\067\022\074\023\065\024\076\025\100\036" +
    "\077\001\001\000\002\001\001\000\044\005\165\006\064" +
    "\007\066\010\054\011\071\012\072\013\075\014\063\016" +
    "\045\017\051\020\070\021\067\022\074\023\065\024\076" +
    "\025\100\036\077\001\001\000\002\001\001\000\026\007" +
    "\066\016\167\017\051\020\070\021\067\022\074\023\065" +
    "\024\076\025\100\036\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\176\040\030\001\001\000\004\010\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 RESULT = d;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= ERROR 
            {
              DecList RESULT =null;
		
                 RESULT = null;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration_list declaration 
            {
              DecList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           DecList t = dl;
                           while( t.tail != null ) {
                              t = t.tail;
                           }

                           t.tail = new DecList(d, null);
                           
                           RESULT = dl;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_list ::= declaration 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(d, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= error declaration 
            {
              DecList RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec ed = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           parser.report_error("Invalid", null);
                           RESULT = new DecList(ed, null);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= var_declaration 
            {
              Dec RESULT =null;
		int var_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec var_dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = var_dec; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= fun_declaration 
            {
              Dec RESULT =null;
		int fun_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fun_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec fun_dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = fun_dec;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= fun_prototype 
            {
              Dec RESULT =null;
		int fun_protleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fun_protright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec fun_prot = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = fun_prot;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_declaration ::= type_specifier ID SEMI 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                           RESULT = new SimpleDec(tleft, tright, t, i); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_declaration ::= type_specifier ID SQLPAREN NUM SQRPAREN SEMI 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        IntExp array_size = new IntExp(ileft, iright, n); //get the size of the array 
                        RESULT = new ArrayDec(tleft, tright, t, i, array_size);
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_declaration ::= INT error 
            {
              Dec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         parser.report_error("Error invalid variable declaration", null);
                         RESULT = new SimpleDec(eleft, eright, new NameTy(eleft, eright, NameTy.INT), null);
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_declaration ::= BOOL error 
            {
              Dec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         parser.report_error("Error invalid variable declaration", null);
                         RESULT = new SimpleDec(eleft, eright, new NameTy(eleft, eright, NameTy.BOOL), null);
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_specifier ::= INT 
            {
              NameTy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new NameTy(ileft, iright, NameTy.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_specifier ::= VOID 
            {
              NameTy RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameTy(vleft, vright, NameTy.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_specifier ::= BOOL 
            {
              NameTy RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameTy(bleft, bright, NameTy.BOOL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fun_declaration ::= type_specifier ID LPAREN params RPAREN compound_stmt 
            {
              Dec RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy type = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new FunctionDec(typeleft, typeright, type, name, (VarDecList)p, (CompoundExp)body);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fun_declaration ::= type_specifier ID error param_list RPAREN compound_stmt 
            {
              Dec RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy type = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList pl = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        parser.report_error("Invalid function declaration", null);
                        RESULT = new FunctionDec(typeleft, typeright, type, name, (VarDecList)pl,(CompoundExp)body);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fun_declaration ::= type_specifier ID LPAREN param_list error compound_stmt 
            {
              Dec RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy type = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList pl = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        parser.report_error("Invalid function declaration", null);
                        RESULT = new FunctionDec(typeleft, typeright, type, name, (VarDecList)pl,(CompoundExp)body);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fun_prototype ::= type_specifier ID LPAREN params RPAREN SEMI 
            {
              Dec RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy type = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                     RESULT = new FunctionDec(typeleft, typeright, type, name, (VarDecList)p, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_prototype",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // params ::= param_list 
            {
              Object RESULT =null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecList p_list = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = p_list;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // params ::= VOID 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param_list ::= param_list COMMA param 
            {
              VarDecList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList l = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  VarDecList dcls = (VarDecList)l;
                  while(dcls.tail != null) {
                     dcls = dcls.tail;
                  }
                  dcls.tail = new VarDecList((VarDec)p, null);    // add to the list of parameters in the function definition
                  RESULT = l;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param_list ::= param 
            {
              VarDecList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecList((VarDec)p, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= type_specifier ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NameTy type = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT = new SimpleDec(typeleft, typeright, type, name); // single variable parameter
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param ::= type_specifier ID SQLPAREN SQRPAREN 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameTy type = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  RESULT = new ArrayDec(typeleft, typeright, type, name, null); // array parameter
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compound_stmt ::= LCURLY local_declarations statem_list RCURLY 
            {
              Object RESULT =null;
		int ldecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList ldec = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
                        RESULT = new CompoundExp(slleft, slright, ldec, (ExpList)sl);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // local_declarations ::= local_declarations var_declaration 
            {
              VarDecList RESULT =null;
		int ldecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecList ldec = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec var_dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           
                           VarDecList decs = ldec;
                           if (decs == null) {
                              RESULT = new VarDecList((VarDec)var_dec, ldec);     // variable declarations in the local function scope
                           } else {
                              for (; decs.tail != null; decs = decs.tail);
                              decs.tail = new VarDecList((VarDec)var_dec, null);
                              RESULT = ldec;
                           }

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // local_declarations ::= 
            {
              VarDecList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statem_list ::= statem_list statem 
            {
              ExpList RESULT =null;
		int st_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList st_list = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp st = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     ExpList exps = st_list;
                     if (exps == null ) {
                        RESULT = new ExpList(st, (ExpList)st_list); // list of expressions in the function
                     } else {
                           for (; exps.tail != null; exps = exps.tail);
                           exps.tail = new ExpList(st, null);
                           RESULT = st_list;
                     }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statem_list ::= 
            {
              ExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statem ::= expression_stmt 
            {
              Exp RESULT =null;
		int e_stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e_stm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = (Exp)e_stm;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statem ::= compound_stmt 
            {
              Exp RESULT =null;
		int c_stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c_stm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = (Exp)c_stm;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statem ::= selection_stmt 
            {
              Exp RESULT =null;
		int s_stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s_stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s_stm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = (Exp)s_stm;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statem ::= iteration_stmt 
            {
              Exp RESULT =null;
		int i_stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i_stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i_stm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = (Exp)i_stm;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statem ::= return_stmt 
            {
              Exp RESULT =null;
		int r_stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r_stm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = (Exp)r_stm;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statem ::= RETURN error 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  parser.report_error("Invalid return statment", null);
                  RESULT = new ReturnExp(eleft, eright, null);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statem ::= error SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  parser.report_error("Error invalid statement", null);
                  RESULT = new NilExp(eleft, eright);

               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statem",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression_stmt ::= expression SEMI 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ex;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression_stmt ::= SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= var EQ expression 
            {
              Exp RESULT =null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           VarExp left_side = new VarExp(vrleft, vrright, (Var)vr); 

                           RESULT = new AssignExp(vrleft, vrright, left_side, ex); // assign a variable
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= obool_expression 
            {
              Exp RESULT =null;
		int oexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp oex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = oex;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // selection_stmt ::= IF LPAREN expression RPAREN statem 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp st = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = new IfExp(exleft, exright, ex, st, null); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // selection_stmt ::= IF LPAREN expression RPAREN statem ELSE statem 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp st1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp st2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = new IfExp(exleft, exright, ex, st1, st2); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iteration_stmt ::= WHILE LPAREN expression RPAREN statem 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp st = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = new WhileExp(exleft, exright, ex, st);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // return_stmt ::= RETURN expression SEMI 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                           RESULT = new ReturnExp(rtleft, rtright, ex);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // return_stmt ::= RETURN SEMI 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                           RESULT = new ReturnExp(rtleft, rtright, null);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new SimpleVar(nameleft, nameright, name); //for single variable
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var ::= ID SQLPAREN expression SQRPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new IndexVar(nameleft, nameright, name, ex); //for array variable
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // obool_expression ::= obool_expression LOR obool_expression 
            {
              Exp RESULT =null;
		int oex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp oex1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp oex2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = new OpExp(oex1left, oex1right, oex1, OpExp.LOR, oex2);
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obool_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // obool_expression ::= abool_expression 
            {
              Exp RESULT =null;
		int aexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = aex;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obool_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relop ::= LTE 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.LTE;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relop ::= LT 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.LT;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relop ::= GT 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.GT;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relop ::= GTE 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.GTE;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relop ::= ASSIGN 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.ASSIGN;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relop ::= NEQ 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.NEQ;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // abool_expression ::= abool_expression LAND ubool_expression 
            {
              Exp RESULT =null;
		int aexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp uex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new OpExp(aexleft, aexright, aex, OpExp.LAND, uex);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("abool_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // abool_expression ::= ubool_expression 
            {
              Exp RESULT =null;
		int uexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp uex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = (Exp)uex;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("abool_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ubool_expression ::= UB ubool_expression 
            {
              Exp RESULT =null;
		
                           //
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ubool_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ubool_expression ::= simple_expression 
            {
              Exp RESULT =null;
		int spexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp spex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = spex;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ubool_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_expression ::= additive_expression relop additive_expression 
            {
              Exp RESULT =null;
		int adex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int adex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp adex1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer rl = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int adex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp adex2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = new OpExp(adex1left, adex1right, adex1, rl, adex2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_expression ::= additive_expression 
            {
              Exp RESULT =null;
		int adexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp adex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = (Exp)adex;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // additive_expression ::= additive_expression addop term 
            {
              Exp RESULT =null;
		int adexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int adexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp adex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int adpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer adp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp trm = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = new OpExp(adexleft, adexright, adex, adp, trm);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // additive_expression ::= term 
            {
              Exp RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp tr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = tr;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // addop ::= PLUS 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.PLUS;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // addop ::= MINUS 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.MINUS;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term mulop signed_factor 
            {
              Exp RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp trm = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mlpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mlpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer mlp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp sf = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new OpExp(trmleft, trmright, trm, mlp, sf);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= signed_factor 
            {
              Exp RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp sf = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = sf;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mulop ::= TIMES 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.TIMES;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mulop ::= OVER 
            {
              Integer RESULT =null;
		
                     RESULT = OpExp.OVER;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // signed_factor ::= UB signed_factor 
            {
              Exp RESULT =null;
		

                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signed_factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // signed_factor ::= factor 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp fc = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = fc;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signed_factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ex;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= var 
            {
              Exp RESULT =null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new VarExp(vrleft, vrright, (Var)vr);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= call 
            {
              Exp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cl = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = cl;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= NUM 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new IntExp(nleft, nright, n);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= TRUTH 
            {
              Exp RESULT =null;
		
                        //
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // call ::= ID LPAREN args RPAREN 
            {
              Exp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList as = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new CallExp(nameleft, nameright, name, as); //function call with 'as' as arguments.
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // args ::= arg_list 
            {
              ExpList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList al = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = al;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // args ::= 
            {
              ExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arg_list ::= arg_list COMMA expression 
            {
              ExpList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList al = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     //ExpList tmp = al;
                     //while (tmp.tail != null) {
                     //   tmp = tmp.tail;
                     //}
                     ExpList tmp;
                     for (tmp = al; tmp.tail != null; tmp = tmp.tail);
                     tmp.tail = new ExpList(ex, null);
                     RESULT = al;

                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arg_list ::= expression 
            {
              ExpList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new ExpList(ex, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
